#pragma once

#include <types.h>

typedef struct {
	uint16_t	OffsetLow;
	uint16_t	SegmentSelector;
	uint8_t		IST;
	uint8_t		Attributes;
	uint16_t	OffsetMid;
	uint32_t	OffsetHigh;
	uint32_t	Reserved;
} __attribute__((packed)) IDTEntry;

typedef struct {
	uint16_t	Size;
	uint64_t	Offset;
} __attribute__((packed)) IDTDescriptor;

typedef struct {
	uint64_t	r15;
	uint64_t	r14;
	uint64_t	r13;
	uint64_t	r12;
	uint64_t	r11;
	uint64_t	r10;
	uint64_t	r9;
	uint64_t	r8;
	uint64_t	rbp;
	uint64_t	rdi;
	uint64_t	rsi;
	uint64_t	rdx;
	uint64_t	rcx;
	uint64_t	rbx;
	uint64_t	rax;

	uint64_t	int_num;
	uint64_t	err;

	uint64_t	rip;
	uint64_t	cs;
	uint64_t	rflags;
	uint64_t	rsp;
	uint64_t	ss;
} __attribute__((packed)) InterruptStackFrame;

typedef struct {
	InterruptStackFrame*	rbp;
	uint64_t				rip;
} __attribute__((packed)) StackFrame;

#define IDT_MAX_ENTRIES 256

void InitInterrupts();

void RemapPIC();
void AcknowledgePIC(uint8_t irq);
void InitIDT();
void SetIDTDescriptor(uint8_t vector, void* isr, uint8_t attrs);
void InitIRQ();

void IRQInstallHandler(uint8_t irq, void(*handler)(InterruptStackFrame* frame));
void IRQUninstallHandler(uint8_t irq);

static const char *IntMsgs[] = 
{
	// From the Intel Dev Manual:		Type		Error Code	Source
	"Zero Division",				//	Fault		No			DIV and IDIV Instructions
	"Debug",						//	Fault/Trap	No			Breakpoints
	"Non-Maskable Interrupt",		//	Interrupt	No			Non-maskable external interrupt
	"Breakpoint",					//	Trap		No			INT3 Instruction
	"Overflow",						//	Trap		No			INT0 Instruction
	"Bound Range Exceeded",			//	Fault		No			BOUND Instruction
	"Invalid Opcode",				//	Fault		No			Unknown or reserved opcode
	"Device Unavailable",			//	Fault		No			Floating point or WAIT/FWAIT Instruction
	"Double Fault",					//	Abort		Yes (0)		Something that generates an exception
	"Coprocessor Segment Overrun",	//	Fault		No			Floating point (This is legacy and not generated by processors after the 386)
	"Invalid TSS",					//	Fault		Yes			Task switch or TSS access
	"Segment Not Present",			//	Fault		Yes			Loading seg regs or accessing sys segs
	"Stack Fault",					//	Fault		Yes			Stack operations and SS loads
	"General Protection Fault",		//	Fault		Yes			Any memory reference and other protection checks
	"Page Fault",					//	Fault		Yes			Any memory reference
	"System Reserved 1",			//				No
	"x87 FPU Error",				//	Fault		No			x87 FPU Floating point or WAIT/FWAIT Instruction
	"Alignment Check",				//	Fault		Yes (0)		Any data reference in memory
	"Machine Check",				//	Abort		No			From the machine (any codes are source & model dependent)
	"SIMD Floating Point Error",	//	Fault		No			SSE, SSE2, SSE3 Floating point Instructions
	"Virtualisation Error",			//	Fault		No			EPT Violations (only on certain processors)
	"Control Protection Exception", //	Fault		Yes			Branch faults
	"System Reserved 2",			//
	"System Reserved 3",			//
	"System Reserved 4",			//
	"System Reserved 5",			//
	"System Reserved 6",			//
	"System Reserved 7",			//
	"System Reserved 8",			//
	"System Reserved 9",			//
	"System Reserved 10",			//
	"System Reserved 11",			//
									// Interrupts 32-255 are User defined i.e non reserved. These are called by external interrupts or INT n
};